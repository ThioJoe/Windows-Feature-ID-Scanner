# windows-scanner.yml
name: Windows Feature Scanner

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

jobs:
  scan:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Windows version and build info
        id: windows-info
        shell: powershell
        run: |
          $osInfo = Get-CimInstance -ClassName Win32_OperatingSystem
          $regInfo = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion'
          $build = $osInfo.BuildNumber
          $fullBuild = "$($osInfo.BuildNumber).$($regInfo.UBR)"
          $architecture = $env:PROCESSOR_ARCHITECTURE
          Write-Host "Base Build: $build"
          Write-Host "Full Build: $fullBuild"
          Write-Host "Architecture: $architecture"
          echo "build=$build" >> $env:GITHUB_OUTPUT
          echo "full_build=$fullBuild" >> $env:GITHUB_OUTPUT
          echo "architecture=$architecture" >> $env:GITHUB_OUTPUT

      - name: Cache Windows Symbols
        id: cache-symbols
        uses: actions/cache@v4
        with:
          path: C:\Symbols
          key: symbols-${{ runner.os }}-${{ steps.windows-info.outputs.full_build }}

      # UPDATED: Now updates WinGet itself before using it.
      - name: Download Symbols (if cache missed)
        if: steps.cache-symbols.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          Write-Host "No cache found for build ${{ steps.windows-info.outputs.full_build }}. Preparing to download symbols..."
          
          # 1. Update WinGet (App Installer) to fix the first-run agreement bug.
          Write-Host "[LOG] Updating WinGet by installing the latest App Installer package..."
          $wingetUpdaterPath = "winget_updater.msixbundle"
          Invoke-WebRequest -Uri "https://aka.ms/getwinget" -OutFile $wingetUpdaterPath
          Add-AppxPackage -Path $wingetUpdaterPath
          Remove-Item -Path $wingetUpdaterPath
          Write-Host "[LOG] WinGet update complete."

          # 2. Now that WinGet is updated, install the Windows SDK.
          Write-Host "[LOG] Attempting to install the Windows SDK via updated WinGet..."
          winget install -e --id Microsoft.WindowsSDK --accept-source-agreements --accept-package-agreements
          
          # 3. Create the directory for the symbols
          New-Item -Path "C:\Symbols" -ItemType Directory -Force
          $symChkPath = $null
          
          # 4. Find symchk.exe
          Write-Host "[LOG] Searching for symchk.exe..."
          $baseSearchPaths = @("C:\Program Files (x86)\Windows Kits", "C:\Program Files\Windows Kits")
          foreach ($path in $baseSearchPaths) {
            if (-not (Test-Path $path)) { continue }
            $debuggerDir = Get-ChildItem -Path $path -Directory -Filter "Debuggers" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($debuggerDir) {
              $found = Get-ChildItem -Path $debuggerDir.FullName -Filter "symchk.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($found) { $symChkPath = $found.FullName; break }
            }
          }

          # 5. Run the symbol checker or fail with diagnostics.
          if ($symChkPath) {
            Write-Host "[SUCCESS] Found symchk.exe at: $symChkPath"
            & $symChkPath /r "C:\Windows\System32" /s "SRV*C:\Symbols*http://msdl.microsoft.com/download/symbols"
          } else {
            Write-Error "Could not automatically locate symchk.exe even after attempting SDK install."
            exit 1
          }
          
          Write-Host "Symbol download complete."

      - name: Download and Extract ViVeTool
        shell: powershell
        run: .\download-vivetool.ps1

      - name: Run feature scanner script
        shell: powershell
        run: .\scan-features.ps1

      - name: Create output directory based on build version
        shell: powershell
        run: |
          $buildFolder = "output/Windows-Build-${{ steps.windows-info.outputs.full_build }}-${{ steps.windows-info.outputs.architecture }}"
          New-Item -ItemType Directory -Force -Path $buildFolder
          echo "BUILD_FOLDER=$buildFolder" >> $env:GITHUB_ENV

      - name: Copy output files to build-specific folder
        shell: powershell
        run: |
          if (Test-Path "output-temp\*") {
            Copy-Item -Path "output-temp\*" -Destination $env:BUILD_FOLDER -Recurse -Force
            Write-Host "Files copied to $env:BUILD_FOLDER"
            Get-ChildItem -Path $env:BUILD_FOLDER -Recurse
          } else {
            Write-Host "No output files found in output-temp directory"
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scanner-output-build-${{ steps.windows-info.outputs.full_build }}-${{ steps.windows-info.outputs.architecture }}
          path: output/
          if-no-files-found: warn