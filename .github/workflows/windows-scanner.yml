# windows-scanner.yml
name: Windows Feature Scanner

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

jobs:
  scan:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Windows version and build info
        id: windows-info
        shell: powershell
        run: |
          $osInfo = Get-CimInstance -ClassName Win32_OperatingSystem
          $regInfo = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion'
          $build = $osInfo.BuildNumber
          $fullBuild = "$($osInfo.BuildNumber).$($regInfo.UBR)"
          $architecture = $env:PROCESSOR_ARCHITECTURE
          Write-Host "Base Build: $build"
          Write-Host "Full Build: $fullBuild"
          Write-Host "Architecture: $architecture"
          echo "build=$build" >> $env:GITHUB_OUTPUT
          echo "full_build=$fullBuild" >> $env:GITHUB_OUTPUT
          echo "architecture=$architecture" >> $env:GITHUB_OUTPUT

      - name: Cache Windows Symbols
        id: cache-symbols
        uses: actions/cache@v4
        with:
          path: C:\Symbols
          key: symbols-${{ runner.os }}-${{ steps.windows-info.outputs.full_build }}

      - name: Download Symbols (if cache missed)
        if: steps.cache-symbols.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          Write-Host "No cache found. Installing SDK Debugging Tools and downloading symbols..."
          
          # 1. Download and install the SDK Debugging Tools
          $sdkInstaller = "winsdksetup.exe"
          Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2335755" -OutFile $sdkInstaller
          Start-Process -FilePath $sdkInstaller -ArgumentList "/features OptionId.WindowsDesktopDebuggers /q /norestart" -Wait
          Remove-Item -Path $sdkInstaller
          
          # 2. Find symchk.exe
          New-Item -Path "C:\Symbols" -ItemType Directory -Force
          $symChkPath = $null
          $searchPaths = @("C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\symchk.exe", "C:\Program Files\Windows Kits\10\Debuggers\x64\symchk.exe")
          foreach ($path in $searchPaths) {
            if (Test-Path $path) { $symChkPath = $path; break }
          }
          
          # 3. Run the symbol checker
          if ($symChkPath) {
            Write-Host "[SUCCESS] Found symchk.exe at: $symChkPath"
            # Added /op flag to list passing files and piped to Out-Host for real-time output.
            & $symChkPath /op /r "C:\Windows\System32" /s "SRV*C:\Symbols*http://msdl.microsoft.com/download/symbols" | Out-Host
          } else {
            Write-Error "Could not locate symchk.exe even after installing SDK Debugging Tools."
            exit 1
          }
          
          Write-Host "Symbol download complete."

      - name: Download and Extract ViVeTool
        shell: powershell
        run: .\download-vivetool.ps1

      - name: Run feature scanner script
        shell: powershell
        run: .\scan-features.ps1

      - name: Create output directory based on build version
        shell: powershell
        run: |
          $buildFolder = "output/Windows-Build-${{ steps.windows-info.outputs.full_build }}-${{ steps.windows-info.outputs.architecture }}"
          New-Item -ItemType Directory -Force -Path $buildFolder
          echo "BUILD_FOLDER=$buildFolder" >> $env:GITHUB_ENV

      - name: Copy output files to build-specific folder
        shell: powershell
        run: |
          if (Test-Path "output-temp\*") {
            Copy-Item -Path "output-temp\*" -Destination $env:BUILD_FOLDER -Recurse -Force
            Write-Host "Files copied to $env:BUILD_FOLDER"
            Get-ChildItem -Path $env:BUILD_FOLDER -Recurse
          } else {
            Write-Host "No output files found in output-temp directory"
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scanner-output-build-${{ steps.windows-info.outputs.full_build }}-${{ steps.windows-info.outputs.architecture }}
          path: output/
          if-no-files-found: warn